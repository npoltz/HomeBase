@model SensorDataViewModel
@{
    ViewData["Title"] = "Sensor Data";
}

<script src="~/js/moment.min.js"></script>
<script src="~/js/Chart.min.js"></script>
<div class="text-center">
    <h1 class="display-4">Humidor Readings</h1>
    <div>
        <div>
            <img src="~/images/time_48dp.png" width="24" height="24" />
            <h6 style="display:inline">Last Updated: </h6><label id="lastUpdated">@Model.LastUpdated</label>
        </div>
        <div>
            <img src="~/images/temperature_48dp.png" width="24" height="24" />
            <h6 style="display:inline">Temperature: </h6><label id="temperature">@Model.LatestTemperature</label>
            <img src="~/images/humidity_48dp.png" width="24" height="24" style="margin-left:20px" />
            <h6 style="display:inline">Relative Humidity: </h6><label id="humidity">@Model.LatestRelativeHumidity</label>
        </div>
    </div>
    <input type="button"
           class="button"
           value="Raw"
           onclick="SetPeriodInterval(0)" />
    <input type="button"
           class="button"
           value="Day"
           onclick="SetPeriodInterval(1)" />
    <input type="button"
           class="button"
           value="Week"
           onclick="SetPeriodInterval(2)" />
    <input type="button"
           class="button"
           value="Month"
           onclick="SetPeriodInterval(3)" />
    <input type="button"
           class="button"
           value="Year"
           onclick="SetPeriodInterval(4)" />
    <canvas id="myChart" style="margin:0" width="400" height="200"></canvas>
    <script>
        var chartCanvas = document.getElementById("myChart");

        var chartOptions = {
            legend: {
                display: false,
                position: 'top',
                labels: {
                    boxWidth: 80,
                    fontColor: 'black'
                }
            },
            scales: {
                xAxes: [{
                    type: "time",
                    time: {
                        unit: 'hour',
                        unitStepSize: 10,
                        round: 'minute',
                        tooltipFormat: "YYYY-MM-DD hh:mm:ss a",
                        displayFormats: {
                            hour: 'MM-DD HH:mm'
                        }
                    }
                }],
                yAxes: [{
                    scaleFontSize: 10,
                    id: 'temperatureAxis',
                    position: 'left',
                    ticks: {
                        suggestedMin: 0,
                        suggestedMax: 40
                    },
                    scaleLabel: {
                        display: true,
                        labelString: "Temperature (°C)"
                    }
                },
                {
                    scaleFontSize: 10,
                    id: 'humidityAxis',
                    position: 'right',
                    ticks: {
                        suggestedMin: 0,
                        suggestedMax: 100
                    },
                    scaleLabel: {
                        display: true,
                        labelString: "Relative Humidity (%)"
                    }
                }]
            }
        };

        myChart = new Chart(chartCanvas, {
            type: 'line',
            options: chartOptions
        });

        function updateSensorData(jsonSensorData) {
            console.log(jsonSensorData);

            if (jsonSensorData == null) {
                myChart.data.datasets.pop();
                myChart.data.datasets.pop();
                myChart.update();
                return;
            }

            var timeStampLabels = jsonSensorData.map(function (e) {
                return e.timestamp;
            });
            var temperatureData = jsonSensorData.map(function (e) {
                return e.temperature;
            });
            var humidityData = jsonSensorData.map(function (e) {
                return e.relativeHumidity;
            });

            var sensorData = {
                labels: timeStampLabels,
                datasets: [{
                    borderColor: 'tomato',
                    label: "Temperature",
                    yAxisID: 'temperatureAxis',
                    data: temperatureData,
                    fill: false,
                    pointRadius: 2
                },
                {
                    borderColor: 'paleturquoise',
                    label: "Humidity",
                    yAxisID: 'humidityAxis',
                    data: humidityData,
                    fill: false,
                    pointRadius: 2
                }]
            };

            myChart.data = sensorData;
            myChart.update();
        }

        function SetPeriodInterval(periodInterval){
            var url = '@Url.Action("SetPeriodInterval", "Home")';
            $.ajax({
                dataType: "json",
                url: url,
                data: "periodInterval=" + periodInterval,
                success: function (data) {
                    updateSensorData(data);
                },
                error: function (error) {
                    console.log("Error:");
                    console.log(error);
                    myChart.data.datasets.pop();
                    myChart.data.datasets.pop();
                    myChart.update();
                }
            });
        };

        var rawData = @Html.Raw(Json.Serialize(@Model.JsonDataLogs));
        if (rawData == null || rawData == "") {
            updateSensorData(null);
        }
        else {
            var jsonSensorData = JSON.parse(rawData);
            updateSensorData(jsonSensorData);
        }
    </script>
</div>
